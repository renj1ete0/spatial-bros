---
title: "Project: Spatial Bros"
description: "Exploring Network-Constrained Spatial Point Analysis"
author: "Spatial Bros"
date: "27/03/2023"
number-sections: true
categories: ["network-constrained spatial point analysis"]
title-block-banner: true
---

# Network Constrained Spatial Point Pattern Analysis

## Project Overview

Network constrained Spatial Point Patterns Analysis (NetSPAA) is a collection of spatial point patterns analysis methods special developed for analysing spatial point event occurs on or alongside network.

The spatial point event can be locations of childcare centre for example.

The network, on the other hand can be a road network for example.

More information with regards to data sources used for this project can be found at the [proposal](https://spatialbros.netlify.app/proposal.html#data-sources)

## Installing the R packages

In this project, x packages will be used

```{r}
pacman::p_load(sp, sf, rgdal, spNetwork, tmap, readr, dplyr)
```

## Data Import and Preparation

### Melbourne City's Road Network

Importing of shapefile, converting to EPSG of 7855 and converting Geometry Type to LINGSTRING.

```{r}
road_network <- st_read("data/geospatial/Roads Network", layer = "road-corridors")
road_network <- st_transform(road_network, crs = 7855)
road_network_lines <- st_boundary(road_network) %>% 
                     st_cast("LINESTRING")
```

### Melbourne City's Pedestrian Network

```{r}
pedestrian_network <- st_read("data/geospatial/Pedestrian Network/pedestrian-network.geojson")
pedestrian_network <- st_transform(pedestrian_network, crs = 7855)
pedestrian_network <- pedestrian_network[st_geometry_type(st_geometry(pedestrian_network)) == "LINESTRING",]
```

### Melbourne City's Tram Network

```{r}
tram_network <- st_read("data/geospatial/Trams Network", layer = "PTV_METRO_TRAM_ROUTE")
tram_network <- st_transform(tram_network, crs = 7855)
```

### Localities

Localities file downloaded was entire Australia. Therefore, we need to filter to retrieve localities of Melbourne.

```{r}
localities = st_read("data/geospatial/Localities", layer = "vic_localities") 
#melbourne_localities <- localities[localities$UCL_NAME21 == "Melbourne", ]
#melbourne_localities <- st_transform(melbourne_localities, crs = 7855)

```

### Melbourne City's Local Government Areas

Local Government Areas file downloaded was entire Australia. Therefore, we need to filter to retrieve Local Government Areas of Melbourne.

```{r}
local_government_areas = st_read("data/geospatial/Local Government Areas", layer = "LGA_2022_AUST_GDA2020")
melbourne_local_government_areas = local_government_areas[local_government_areas$LGA_NAME22 == "Melbourne",]
melbourne_local_government_areas <- st_transform(melbourne_local_government_areas, crs = 7855)
```

### Melbourne City's Business Establishments Spatial Point

To retrieve only latest as of 2021 business establishments and is not vacant.

```{r}
business_est_sp <- st_read("data/geospatial/Business Establishments Spatial Point/business-establishments-with-address-and-industry-classification.geojson") %>% filter(census_year == "2021") %>% filter(trading_name != "Vacant")
business_est_sp <- st_transform(business_est_sp, crs = 7855) 
```

### Melbourne City's Drinking Fountain Spatial Point

```{r}
drinking_fountain_sp <- st_read("data/geospatial/Drinking Fountain Spatial Point", layer = "drinking-fountains")
drinking_fountain_sp <- st_transform(drinking_fountain_sp, crs = 7855)
```

### Melbourne City's Landmarks Spatial Point

```{r}
landmarks_sp <- st_read("data/geospatial/Landmarks Spatial Point", layer = "landmarks-and-places-of-interest-including-schools-theatres-health-services-spor")
landmarks_sp <- st_transform(landmarks_sp, crs = 7855)
```

### Melbourne City's Childcare Centres Spatial Point

```{r}
childcare_sp <- read_csv("data/geospatial/Childcare Centres Spatial Point/childcare-centres.csv")

```

#### Creating a simple feature data frame from Childcare Centres Spatial Point listings

Upon research, it was found that EPSG: 4326 is wGS84 Geographic Coordinate System, therefore we have to convert it to Melbourne's GDA2020 / MGA zone 55 -- EPSG:7855 (https://parametricmonkey.com/2020/04/08/understanding-australias-coordinate-systems/)

```{r}
childcare_sp_sf <- st_as_sf(childcare_sp, 
                       coords = c("lon", "lat"),
                       crs=4326) %>%
  st_transform(crs = 7855)
```

#### Converting to Spatial Point Data Frame

```{r}
childcare_spdf <- as(childcare_sp_sf, "Spatial")
childcare_spdf
```

### Melbourne City's Public Toilets Spatial Point

```{r}
public_toilets_sp <- read_csv("data/geospatial/Public Toilets Spatial Point/public-toilets.csv")
```

#### Creating a simple feature data frame from Public Toilets Spatial Point listings

Upon research, it was found that EPSG: 4326 is wGS84 Geographic Coordinate System, therefore we have to convert it to Melbourne's GDA2020 / MGA zone 55 -- EPSG:7855 (https://parametricmonkey.com/2020/04/08/understanding-australias-coordinate-systems/)

```{r}
public_toilets_sp_sf <- st_as_sf(public_toilets_sp, 
                       coords = c("lon", "lat"),
                       crs=4326) %>%
  st_transform(crs = 7855)
```

#### Converting to Spatial Point Data Frame

```{r}
public_toilets_spdf <- as(public_toilets_sp_sf, "Spatial")
public_toilets_spdf
```

## Visualising the Geospatial Data

### Melbourne City's road network with Business Establishments

```{r}
tmap_options('view')
road_network_be <- tm_basemap(server = "OpenStreetMap") +
  tm_shape(road_network_lines) +
  tm_lines() +
  tm_shape(business_est_sp) +
  tm_dots(size = 0.03, col="green")
```

### Melbourne City's road network with Childcare Centres

```{r}
tmap_options('view')
road_network_cc <- tm_basemap(server = "OpenStreetMap") +
  tm_shape(road_network_lines) +
  tm_lines() +
  tm_shape(childcare_spdf) +
  tm_dots(size = 0.03, col="green")
```

### Melbourne City's road network with Drinking Fountain

```{r}
tmap_options('view')
road_network_df <- tm_basemap(server = "OpenStreetMap") +
 tm_shape(road_network_lines) +
 tm_lines() +
 tm_shape(drinking_fountain_sp) +
 tm_dots(size = 0.03, col="green")
```

### Melbourne City's road network with Landmarks

```{r}
tmap_options('view')
road_network_landmarks <- tm_basemap(server = "OpenStreetMap") +
  tm_shape(road_network_lines) +
  tm_lines() +
  tm_shape(landmarks_sp) +
  tm_dots(size = 0.03, col="green")
```

### Melbourne City's road network with Public Toilets

```{r}
tmap_options('view')
road_network_pt <- tm_basemap(server = "OpenStreetMap") +
  tm_shape(road_network_lines) +
  tm_lines() +
  tm_shape(public_toilets_spdf) +
  tm_dots(size = 0.03, col="green")
```

Saving road networks with all spatial points to a html file separately

```{r}
tmap_save(road_network_cc, "tmaphtml/road_network_cc.html")
tmap_save(road_network_be, "tmaphtml/road_network_be.html")
tmap_save(road_network_df, "tmaphtml/road_network_df.html")
tmap_save(road_network_landmarks, "tmaphtml/road_network_landmarks.html")
tmap_save(road_network_pt, "tmaphtml/road_network_pt.html")
```

### Melbourne City's pedestrian network with Business Establishments

```{r}
tmap_options('view')
pedestrian_network_be <- tm_basemap(server = "OpenStreetMap") +
  tm_shape(pedestrian_network) +
  tm_lines() +
  tm_shape(business_est_sp) +
  tm_dots(size = 0.03, col="green")
```

### Melbourne City's pedestrian network with Childcare Centres

```{r}
tmap_options('view')
pedestrian_network_cc <- tm_basemap(server = "OpenStreetMap") +
  tm_shape(pedestrian_network) +
  tm_lines() +
  tm_shape(childcare_spdf) +
  tm_dots(size = 0.03, col="green")
```

### Melbourne City's pedestrian network with Drinking Fountain

```{r}
tmap_options('view')
pedestrian_network_df <- tm_basemap(server = "OpenStreetMap") +
 tm_shape(pedestrian_network) +
 tm_lines() +
 tm_shape(drinking_fountain_sp) +
 tm_dots(size = 0.03, col="green")
```

### Melbourne City's pedestrian network with Landmarks

```{r}
tmap_options('view')
pedestrian_network_landmarks <- tm_basemap(server = "OpenStreetMap") +
  tm_shape(pedestrian_network) +
  tm_lines() +
  tm_shape(landmarks_sp) +
  tm_dots(size = 0.03, col="green")
```

### Melbourne City's pedestrian network with Public Toilets

```{r}
tmap_options('view')
pedestrian_network_pt <- tm_basemap(server = "OpenStreetMap") +
  tm_shape(pedestrian_network) +
  tm_lines() +
  tm_shape(public_toilets_spdf) +
  tm_dots(size = 0.03, col="green")
```

Saving pedestrian networks with all spatial points to a html file separately

```{r}
tmap_save(pedestrian_network_cc, "tmaphtml/pedestrian_network_cc.html")
tmap_save(pedestrian_network_be, "tmaphtml/pedestrian_network_be.html")
tmap_save(pedestrian_network_df, "tmaphtml/pedestrian_network_df.html")
tmap_save(pedestrian_network_landmarks, "tmaphtml/pedestrian_network_landmarks.html")
tmap_save(pedestrian_network_pt, "tmaphtml/pedestrian_network_pt.html")
```

### Melbourne City's tram network with Business Establishments

```{r}
tmap_options('view')
tram_network_be <- tm_basemap(server = "OpenStreetMap") +
  tm_shape(tram_network) +
  tm_lines() +
  tm_shape(business_est_sp) +
  tm_dots(size = 0.03, col="green")
```

### Melbourne City's tram network with Childcare Centres

```{r}
tmap_options('view')
tram_network_cc <- tm_basemap(server = "OpenStreetMap") +
  tm_shape(tram_network) +
  tm_lines() +
  tm_shape(childcare_spdf) +
  tm_dots(size = 0.03, col="green")
```

### Melbourne City's tram network with Drinking Fountain

```{r}
tmap_options('view')
tram_network_df <- tm_basemap(server = "OpenStreetMap") +
 tm_shape(tram_network) +
 tm_lines() +
 tm_shape(drinking_fountain_sp) +
 tm_dots(size = 0.03, col="green")
```

### Melbourne City's tram network with Landmarks

```{r}
tmap_options('view')
tram_network_landmarks <- tm_basemap(server = "OpenStreetMap") +
  tm_shape(tram_network) +
  tm_lines() +
  tm_shape(landmarks_sp) +
  tm_dots(size = 0.03, col="green")
```

### Melbourne City's tram network with Public Toilets

```{r}
tmap_options('view')
tram_network_pt <- tm_basemap(server = "OpenStreetMap") +
  tm_shape(tram_network) +
  tm_lines() +
  tm_shape(public_toilets_spdf) +
  tm_dots(size = 0.03, col="green")
```

Saving tram networks with all spatial points to a html file separately

```{r}
tmap_save(tram_network_cc, "tmaphtml/tram_network_cc.html")
tmap_save(tram_network_be, "tmaphtml/tram_network_be.html")
tmap_save(tram_network_df, "tmaphtml/tram_network_df.html")
tmap_save(tram_network_landmarks, "tmaphtml/tram_network_landmarks.html")
tmap_save(tram_network_pt, "tmaphtml/tram_network_pt.html")
```

## Network Constrained KDE (NetKDE) Analysis

In this section, we will perform NetKDE analysis by using appropriate functions provided in spNetwork package.

### Preparing the lixels objects

Before computing NetKDE, the SpatialLines object need to be cut into lixels with a specified minimal distance. This task can be performed by using with lixelize_lines() of spNetwork as shown in the code chunk below.

```{r}
# Lixels for Road Network
road_lixels_cc <- lixelize_lines(road_network_lines, 800, mindist = 350)
road_lixels_be <- lixelize_lines(road_network_lines, 800, mindist = 350)
road_lixels_df <- lixelize_lines(road_network_lines, 800, mindist = 350)
road_lixels_lm <- lixelize_lines(road_network_lines, 800, mindist = 350)
road_lixels_pt <- lixelize_lines(road_network_lines, 800, mindist = 350)

# Lixels for Pedestrian Network
pedestrian_lixels_cc <- lixelize_lines(pedestrian_network, 500, mindist = 350)

# Lixels for Trarm Network
tram_lixels_cc <- lixelize_lines(tram_network, 1000, mindist = 350)
```

The length of a lixel, lx_length is set to 800m, 500m and 1000m respectively for road_network, pedestrian_network and tram_network. The minimum length of a lixel, mindist is set to 350m.

### Generating line centre points

Next, lines_center() of spNetwork will be used to generate a SpatialPointsDataFrame (i.e. samples) with line centre points as shown in the code chunk below.

```{r}
# Road network lines center
road_samples_cc <- lines_center(road_lixels)
road_samples_be <- lines_center(road_lixels)
road_samples_df <- lines_center(road_lixels)
road_samples_lm <- lines_center(road_lixels)
road_samples_pt <- lines_center(road_lixels)

# Pedestrian network lines center
pedestrian_samples_cc <- lines_center(pedestrian_lixels)

# Tram network lines center
tram_samples_cc <- lines_center(tram_lixels)
```

### Performing NetKDE

We are ready to compute the NetKDE by using the code chunk below.

#### Childcare Centres NetKDE
```{r}
road_network_cc_densities <- nkde(road_network_lines, 
                  events = childcare_sp_sf,
                  w = rep(1,nrow(childcare_sp_sf)),
                  samples = road_samples_cc,
                  kernel_name = "quartic",
                  bw = 300, 
                  div= "bw", 
                  method = "simple", 
                  digits = 1, 
                  tol = 1,
                  grid_shape = c(1,1), 
                  max_depth = 8,
                  agg = 10, #we aggregate events within a 10m radius (faster calculation)
                  sparse = TRUE,
                  verbose = FALSE)
```

#### Business Establishments NetKDE

```{r}
road_network_be_densities <- nkde(road_network_lines, 
                  events = business_est_sp,
                  w = rep(1,nrow(business_est_sp)),
                  samples = road_samples_be,
                  kernel_name = "quartic",
                  bw = 300, 
                  div= "bw", 
                  method = "simple", 
                  digits = 1, 
                  tol = 1,
                  grid_shape = c(1,1), 
                  max_depth = 8,
                  agg = 10, #we aggregate events within a 10m radius (faster calculation)
                  sparse = TRUE,
                  verbose = FALSE)
```

#### Drinking Fountain NetKDE

```{r}
road_network_df_densities <- nkde(road_network_lines, 
                  events = drinking_fountain_sp,
                  w = rep(1,nrow(drinking_fountain_sp)),
                  samples = road_samples_df,
                  kernel_name = "quartic",
                  bw = 300, 
                  div= "bw", 
                  method = "simple", 
                  digits = 1, 
                  tol = 1,
                  grid_shape = c(1,1), 
                  max_depth = 8,
                  agg = 10, #we aggregate events within a 10m radius (faster calculation)
                  sparse = TRUE,
                  verbose = FALSE)
```

### Visualising NetKDE

Before we can visualise the NetKDE values, code chunk below will be used to insert the computed density values (i.e. densities) into samples and lixels objects as density field.

```{r}
road_samples_cc$density <- road_network_cc_densities * 1000
road_lixels_cc$density <- road_network_cc_densities * 1000

road_samples_be$density <- road_network_be_densities * 1000
road_lixels_be$density <- road_network_be_densities * 1000

road_samples_df$density <- road_network_df_densities * 1000
road_lixels_df$density <- road_network_df_densities * 1000
```

#### Childcare Centre

```{r}
tmap_options('view')
road_networkKDE_cc <- tm_shape(road_lixels_cc) +
  tm_lines(col="density")+
  tm_shape(childcare_spdf)+
  tm_dots(size = 0.03, col="green")
```
#### Business Establishments

```{r}
tmap_options('view')
road_networkKDE_be <- tm_shape(road_lixels_be) +
  tm_lines(col="density")+
  tm_shape(business_est_sp)+
  tm_dots(size = 0.03, col="green")
```
#### Drinking Fountain

```{r}
tmap_options('view')
road_networkKDE_df <- tm_shape(road_lixels_df) +
  tm_lines(col="density")+
  tm_shape(drinking_fountain_sp)+
  tm_dots(size = 0.03, col="green")
```



```{r}
tmap_save(road_networkKDE_cc, "tmapnetworkKDEhtml/road_networkKDE_cc.html")
tmap_save(road_networkKDE_be, "tmapnetworkKDEhtml/road_networkKDE_be.html")
tmap_save(road_networkKDE_df, "tmapnetworkKDEhtml/road_networkKDE_df.html")
```
