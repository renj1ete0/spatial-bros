```{r}
install.packages("sf_1.0-9.tar.gz", repos = NULL, type="source")
library(shiny)
library(shinythemes)
library(sp)
library(sf)
library(rgdal)
library(spNetwork)
library(tmap)
library(readr)
library(dplyr)
library(ggplot2)
library(plotly)
```

```{r}
loc <- read_rds("rds/melbourne_localities.rds")
```

```{r}
loc <- st_transform(loc, crs = 7855)
```

```{r}
plot(loc)
```

```{r}
boundary <- read_rds("rds/melbourne_local_government_areas.rds")
```

```{r}
boundary <- st_transform(boundary, crs = 7855)
```

```{r}
localities = st_read("test/", layer = "vic_localities") 
```

```{r}
localities <- st_transform(localities, crs = 7855)
```

```{r}
test <- localities %>% filter(LOC_NAME %in% c("Carlton", "Carlton North", "Docklands", "East Melbourne", "Flemington", "Kensington", "Melbourne", "North Melbourne", "Parkville", "Port Melbourne", "South Wharf", "South Yarra", "Southbank", "West Melbourne"))
```

```{r}
plot(test)
plot(boundary)
```

```{r}
saveRDS(test, "rds/melbourne_localities.rds")
```

```{r}
test3
boundary
```

```{r}
test3 <- localities %>% filter(LOC_NAME == "Flemington")

test2 <- st_intersection(boundary, test)
```

```{r}
plot(test2)
```

```{r}
saveRDS(test2, "rds/melbourne_localities.rds")
```

```{r}
net_lines <- read_rds("rds/road_network_lines.rds")
net_lines


hi <- st_intersection(net_lines, boundary)
```

```{r}

loc_interest = read_rds("rds/drinking_fountain.rds")
network_type = read_rds("rds/road_network_lines.rds")

      adaptive = FALSE
      trim_bw = NULL

    
    cv_scores <- bw_cv_likelihood_calc(c(200,800),50,
                             network_type, loc_interest,
                             rep(1,nrow(loc_interest)),
                             "quartic", "simple" , verbose=FALSE, check=TRUE)
    max_index <- which.max(cv_scores[,2])
    max_bandwidth <- cv_scores[max_index, 1]

    road_lixels_cc <- lixelize_lines(network_type, 700, mindist = 350)
    road_samples_cc <- lines_center(road_lixels_cc)
    road_network_cc_densities <- nkde(network_type,
                                      events = loc_interest,
                                      w = rep(1,nrow(loc_interest)), 
                                      samples = road_samples_cc, 
                                      kernel_name =  noquote(input$kernel_name),
                                      bw = max_bandwidth, 
                                      trim_bw = trim_bw,
                                      div= "bw", 
                                      adaptive = adaptive,
                                      method = noquote(input$method_name), 
                                      digits = 3, 
                                      tol = 1,
                                      grid_shape = c(1,1), 
                                      max_depth = 8,
                                      agg = 10,
                                      sparse = TRUE,
                                      verbose = FALSE)
    road_samples_cc$density <- road_network_cc_densities * 1000
    road_lixels_cc$density <- road_network_cc_densities * 1000
    
    tmap_options("view")
          tm_shape(localities) +
        tm_polygons("LOC_NAME", alpha=0.1) +
        tm_shape(boundary) +
        tm_borders(lwd = 2.5, lty = 5,  col="blue") +
        tm_shape(road_lixels_cc) +
        tm_lines(lwd = 1.5, col = "density")+
        tm_shape(loc_interest)+ 
        tm_dots(size = 0.03, alpha = 0.6) 
```
