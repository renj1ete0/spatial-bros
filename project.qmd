---
title: "Project: Spatial Bros"
description: "Exploring Network-Constrained Spatial Point Analysis"
author: "Spatial Bros"
date: "27/03/2023"
number-sections: true
categories: ["network-constrained spatial point analysis"]
title-block-banner: true
---

# Network Constrained Spatial Point Pattern Analysis

## Project Overview

Network constrained Spatial Point Patterns Analysis (NetSPAA) is a collection of spatial point patterns analysis methods special developed for analysing spatial point event occurs on or alongside network.

The spatial point event can be locations of childcare centre for example.

The network, on the other hand can be a road network for example.

More information with regards to data sources used for this project can be found at the [proposal](https://spatialbros.netlify.app/proposal.html#data-sources)

## Installing the R packages

In this project, x packages will be used

```{r}
pacman::p_load(sp, sf, rgdal, spNetwork, tmap, readr)
```

## Data Import and Preparation

### Melbourne Road Network

```{r}
road_network <- st_read("data/geospatial/Roads Network", layer = "road-corridors")
```

### Melbourne Pedestrian Network

```{r}
pedestrian_network <- st_read("data/geospatial/Pedestrian Network/pedestrian-network.geojson")
```

### Tram Network

```{r}
tram_network <- st_read("data/geospatial/Trams Network", layer = "PTV_METRO_TRAM_ROUTE")
```

### Localities

```{r}
localities = st_read("data/geospatial/Localities", layer = "UCL_2021_AUST_GDA2020") 
melbourne_localities <- localities[localities$UCL_NAME21 == "Melbourne", ]

```

### Local Government Areas

```{r}
local_government_areas = st_read("data/geospatial/Local Government Areas", layer = "LGA_2022_AUST_GDA2020")
melbourne_local_government_areas = local_government_areas[local_government_areas$LGA_NAME22 == "Melbourne",]
```

### Business Establishments Spatial Point

```{r}
business_est_sp_point <- st_read("data/geospatial/Business Establishments Spatial Point/business-establishments-with-address-and-industry-classification.geojson")
```

### Drinking Fountain Spatial Point

```{r}
drinking_fountain_sp_point <- st_read("data/geospatial/Drinking Fountain Spatial Point", layer = "drinking-fountains")
```

### Landmarks Spatial Point

```{r}
landmarks_sp_point <- st_read("data/geospatial/Landmarks Spatial Point", layer = "landmarks-and-places-of-interest-including-schools-theatres-health-services-spor")
```


### Residential Dwellings Spatial Point

```{r}
residential_dwelling_sp_point <- st_read("data/geospatial/Residential Dwellings Spatial Point/residential-dwellings.geojson")
```

### Childcare Centres Spatial Point

```{r}
childcare_sp_point <- read_csv("data/geospatial/Childcare Centres Spatial Point/childcare-centres.csv")

```

#### Creating a simple feature data frame from Childcare Centres Spatial Point listings

Upon research, it was found that EPSG: 4326 is wGS84 Geographic Coordinate System, therefore we have to convert it to Melbourne's
GDA2020 / MGA zone 55 – EPSG:7855 (https://parametricmonkey.com/2020/04/08/understanding-australias-coordinate-systems/)

```{r}
childcare_sp_point_sf <- st_as_sf(childcare_sp_point, 
                       coords = c("lon", "lat"),
                       crs=4326) %>%
  st_transform(crs = 7855)
```

### Public Toilets Spatial Point 

```{r}
public_toilets_sp_point <- read_csv("data/geospatial/Public Toilets Spatial Point/public-toilets.csv")
list(public_toilets_sp_point) 
```

#### Creating a simple feature data frame from Public Toilets Spatial Point listings

Upon research, it was found that EPSG: 4326 is wGS84 Geographic Coordinate System, therefore we have to convert it to Melbourne's
GDA2020 / MGA zone 55 – EPSG:7855 (https://parametricmonkey.com/2020/04/08/understanding-australias-coordinate-systems/)

```{r}
public_toilets_sp_point_sf <- st_as_sf(public_toilets_sp_point, 
                       coords = c("lon", "lat"),
                       crs=4326) %>%
  st_transform(crs = 7855)
```

