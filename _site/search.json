[
  {
    "objectID": "proposal.html",
    "href": "proposal.html",
    "title": "Project Proposal: Spatial Bros",
    "section": "",
    "text": "Theme: Point Pattern Analysis"
  },
  {
    "objectID": "proposal.html#data-preparation",
    "href": "proposal.html#data-preparation",
    "title": "Project Proposal: Spatial Bros",
    "section": "4.1 Data Preparation",
    "text": "4.1 Data Preparation\n\nTo source and assemble data from various sources out there\nImporting the Spatial Data (Geospatial and Aspatial)\nData Wrangling \nGenerate Origin-Destination (OD) Matrix using Spatial Points and Networks"
  },
  {
    "objectID": "proposal.html#exploratory-data-analysis",
    "href": "proposal.html#exploratory-data-analysis",
    "title": "Project Proposal: Spatial Bros",
    "section": "4.2 Exploratory Data Analysis",
    "text": "4.2 Exploratory Data Analysis\n\nVisualise and examine the distribution of spatial pointers\nExamine any anomalies and outliers in the dataset sourced\nFurther Data Wrangling (where necessary)"
  },
  {
    "objectID": "proposal.html#network-constrained-point-pattern-analysis",
    "href": "proposal.html#network-constrained-point-pattern-analysis",
    "title": "Project Proposal: Spatial Bros",
    "section": "4.3 Network Constrained Point Pattern Analysis",
    "text": "4.3 Network Constrained Point Pattern Analysis\n\nNetwork Kernel Density Estimation - To explore the intensity of points along network\nG and K function - To identify any potential clustering patterns, random distributions, even or uneven distributions of patterns"
  },
  {
    "objectID": "proposal.html#geographical-accessibility",
    "href": "proposal.html#geographical-accessibility",
    "title": "Project Proposal: Spatial Bros",
    "section": "4.4 Geographical Accessibility",
    "text": "4.4 Geographical Accessibility\n\nTidying the distance matrix by using ODMatrix\nTo identify the accessibility of origins to destinations\nVisualising accessibility using methods such as Hansen, KD2SFCA and Spatial Accessibility Measure (SAM)"
  },
  {
    "objectID": "proposal.html#network-constrained-and-category-based-point-pattern-analysis-for-suguo-retail-stores-in-nanjing-china",
    "href": "proposal.html#network-constrained-and-category-based-point-pattern-analysis-for-suguo-retail-stores-in-nanjing-china",
    "title": "Project Proposal: Spatial Bros",
    "section": "5.1 Network-constrained and category-based point pattern analysis for Suguo retail stores in Nanjing, China",
    "text": "5.1 Network-constrained and category-based point pattern analysis for Suguo retail stores in Nanjing, China\nhttps://www.tandfonline.com/doi/full/10.1080/13658816.2015.1080829\n\n5.1.1 Summary\nNetwork KDE and Network K-function was used to study retail service  hot-spot areas and spatial clustering patterns of a local retail giant, Suguo, in Nanjing City.\n\n\n5.1.2 Learning Points and Linking Back to Our Project\nThe bandwidth for generating network-constrained kernel density estimation (KDE) maps would produce representations of distributions that  and we should explore various network KDE bandwidths to find suitable bandwidth and also provide options for users to adjust bandwidth"
  },
  {
    "objectID": "proposal.html#ease-and-equity-of-point-of-interest-accessibility-via-public-transit-in-the-u.s",
    "href": "proposal.html#ease-and-equity-of-point-of-interest-accessibility-via-public-transit-in-the-u.s",
    "title": "Project Proposal: Spatial Bros",
    "section": "5.2 Ease and Equity of Point of Interest Accessibility via Public Transit in the U.S",
    "text": "5.2 Ease and Equity of Point of Interest Accessibility via Public Transit in the U.S\nhttps://arxiv.org/abs/2212.06954\n\n5.2.1 Summary\nThe team created a tool to analyse the ease and equity of access to major POI using public transit in US cities using an interactive website (to filter selected POIs) calculated with 2SFCA (2-step floating catchment area) approach.\n\nIt aims to explore effectiveness and equity of public transit system in major US cities\n\n\n5.2.2 Learning Points and Linking Back to Our Project\n\nUser Interface for users to filter by POI and view geographical accessibility information and additional"
  },
  {
    "objectID": "proposal.html#using-hexagonal-grids-and-network-analysis-for-spatial-accessibility-assessment-in-urban-environments-a-case-study-of-public-amenities-in-toruń",
    "href": "proposal.html#using-hexagonal-grids-and-network-analysis-for-spatial-accessibility-assessment-in-urban-environments-a-case-study-of-public-amenities-in-toruń",
    "title": "Project Proposal: Spatial Bros",
    "section": "5.3 Using hexagonal grids and network analysis for spatial accessibility assessment in urban environments – a case study of public amenities in Toruń",
    "text": "5.3 Using hexagonal grids and network analysis for spatial accessibility assessment in urban environments – a case study of public amenities in Toruń\nhttp://dx.doi.org/10.2478/mgrsd-2018-0037\n\n5.3.1 Summary\nThe paper looks at a methodology to analyse spatial accessibility using network analysis and a hexagonal grid to the city of Toruń, Poland. The paper also explored that it is important to empower citizens with knowledge of the geospatial analysis and created a web application to empower citizens with knowledge.\n\n\n5.3.2 Learning Points and Linking Back to Our Project\n\nAdopt a similar methodology of converting distance for OD Matrix, specifically Origin and Destination distances to travel times by assuming a walking speed of 4km/h\nNetwork will be calculated using the travel time of the appropriate speed (eg. road will be calculated based on road speed limit)\nThis will prevent underestimation of travel times which may affect the accessbility metrics"
  },
  {
    "objectID": "proposal.html#home-page",
    "href": "proposal.html#home-page",
    "title": "Project Proposal: Spatial Bros",
    "section": "6.1 Home Page",
    "text": "6.1 Home Page"
  },
  {
    "objectID": "proposal.html#network-kde",
    "href": "proposal.html#network-kde",
    "title": "Project Proposal: Spatial Bros",
    "section": "6.2 Network KDE",
    "text": "6.2 Network KDE"
  },
  {
    "objectID": "proposal.html#network-statistical-function",
    "href": "proposal.html#network-statistical-function",
    "title": "Project Proposal: Spatial Bros",
    "section": "6.3 Network Statistical Function",
    "text": "6.3 Network Statistical Function"
  },
  {
    "objectID": "proposal.html#st-order-kde",
    "href": "proposal.html#st-order-kde",
    "title": "Project Proposal: Spatial Bros",
    "section": "6.4 1st Order KDE",
    "text": "6.4 1st Order KDE"
  },
  {
    "objectID": "proposal.html#st-order-stat-function",
    "href": "proposal.html#st-order-stat-function",
    "title": "Project Proposal: Spatial Bros",
    "section": "6.5 1st Order Stat Function",
    "text": "6.5 1st Order Stat Function"
  },
  {
    "objectID": "proposal.html#nd-order-kde",
    "href": "proposal.html#nd-order-kde",
    "title": "Project Proposal: Spatial Bros",
    "section": "6.6 2nd Order KDE",
    "text": "6.6 2nd Order KDE"
  },
  {
    "objectID": "proposal.html#nd-order-stat-function",
    "href": "proposal.html#nd-order-stat-function",
    "title": "Project Proposal: Spatial Bros",
    "section": "6.7 2nd Order Stat Function",
    "text": "6.7 2nd Order Stat Function"
  },
  {
    "objectID": "proposal.html#data",
    "href": "proposal.html#data",
    "title": "Project Proposal: Spatial Bros",
    "section": "6.8 Data",
    "text": "6.8 Data"
  },
  {
    "objectID": "proposal.html#section",
    "href": "proposal.html#section",
    "title": "Project Proposal: Spatial Bros",
    "section": "6.9 ",
    "text": "6.9"
  },
  {
    "objectID": "network_constraint_sp.html",
    "href": "network_constraint_sp.html",
    "title": "Project: Spatial Bros",
    "section": "",
    "text": "Network constrained Spatial Point Patterns Analysis (NetSPAA) is a collection of spatial point patterns analysis methods special developed for analysing spatial point event occurs on or alongside network.\nThe spatial point event can be locations of childcare centre for example.\nThe network, on the other hand can be a road network for example.\nMore information with regards to data sources used for this project can be found at the proposal\n\n\n\nIn this project, x packages will be used\n\npacman::p_load(sp, sf, rgdal, spNetwork, tmap, readr, dplyr)\n\n\n\n\n\n\nImporting of shapefile, converting to EPSG of 7855 and converting Geometry Type to LINGSTRING.\n\nroad_network <- st_read(\"data/geospatial/Roads Network\", layer = \"road-corridors\")\n\nReading layer `road-corridors' from data source \n  `C:\\Users\\Ming Rong\\Desktop\\IS415 Project\\spatial-bros\\data\\geospatial\\Roads Network' \n  using driver `ESRI Shapefile'\nSimple feature collection with 4177 features and 9 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 144.897 ymin: -37.85066 xmax: 144.9913 ymax: -37.77545\nGeodetic CRS:  WGS 84\n\nroad_network <- st_transform(road_network, crs = 7855)\nroad_network_lines <- st_boundary(road_network) %>% \n                     st_cast(\"LINESTRING\")\n\nWarning in st_cast.MULTILINESTRING(X[[i]], ...): keeping first linestring only\n\nWarning in st_cast.MULTILINESTRING(X[[i]], ...): keeping first linestring only\n\nWarning in st_cast.MULTILINESTRING(X[[i]], ...): keeping first linestring only\n\nWarning in st_cast.MULTILINESTRING(X[[i]], ...): keeping first linestring only\n\nWarning in st_cast.MULTILINESTRING(X[[i]], ...): keeping first linestring only\n\nWarning in st_cast.MULTILINESTRING(X[[i]], ...): keeping first linestring only\n\nWarning in st_cast.MULTILINESTRING(X[[i]], ...): keeping first linestring only\n\nWarning in st_cast.MULTILINESTRING(X[[i]], ...): keeping first linestring only\n\nWarning in st_cast.MULTILINESTRING(X[[i]], ...): keeping first linestring only\n\nWarning in st_cast.MULTILINESTRING(X[[i]], ...): keeping first linestring only\n\nWarning in st_cast.MULTILINESTRING(X[[i]], ...): keeping first linestring only\n\nWarning in st_cast.MULTILINESTRING(X[[i]], ...): keeping first linestring only\n\nWarning in st_cast.MULTILINESTRING(X[[i]], ...): keeping first linestring only\n\nWarning in st_cast.MULTILINESTRING(X[[i]], ...): keeping first linestring only\n\nWarning in st_cast.MULTILINESTRING(X[[i]], ...): keeping first linestring only\n\nWarning in st_cast.MULTILINESTRING(X[[i]], ...): keeping first linestring only\n\nWarning in st_cast.MULTILINESTRING(X[[i]], ...): keeping first linestring only\n\nWarning in st_cast.MULTILINESTRING(X[[i]], ...): keeping first linestring only\n\nWarning in st_cast.MULTILINESTRING(X[[i]], ...): keeping first linestring only\n\nWarning in st_cast.MULTILINESTRING(X[[i]], ...): keeping first linestring only\n\nWarning in st_cast.MULTILINESTRING(X[[i]], ...): keeping first linestring only\n\nWarning in st_cast.MULTILINESTRING(X[[i]], ...): keeping first linestring only\n\nWarning in st_cast.MULTILINESTRING(X[[i]], ...): keeping first linestring only\n\nWarning in st_cast.MULTILINESTRING(X[[i]], ...): keeping first linestring only\n\nWarning in st_cast.MULTILINESTRING(X[[i]], ...): keeping first linestring only\n\nWarning in st_cast.MULTILINESTRING(X[[i]], ...): keeping first linestring only\n\nWarning in st_cast.MULTILINESTRING(X[[i]], ...): keeping first linestring only\n\nWarning in st_cast.MULTILINESTRING(X[[i]], ...): keeping first linestring only\n\nWarning in st_cast.MULTILINESTRING(X[[i]], ...): keeping first linestring only\n\nWarning in st_cast.MULTILINESTRING(X[[i]], ...): keeping first linestring only\n\nWarning in st_cast.MULTILINESTRING(X[[i]], ...): keeping first linestring only\n\n\n\n\n\n\npedestrian_network <- st_read(\"data/geospatial/Pedestrian Network/pedestrian-network.geojson\")\n\nReading layer `pedestrian-network' from data source \n  `C:\\Users\\Ming Rong\\Desktop\\IS415 Project\\spatial-bros\\data\\geospatial\\Pedestrian Network\\pedestrian-network.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 85326 features and 3 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 144.8993 ymin: -37.85074 xmax: 144.9918 ymax: -37.77547\nGeodetic CRS:  WGS 84\n\npedestrian_network <- st_transform(pedestrian_network, crs = 7855)\n\n\n\n\n\ntram_network <- st_read(\"data/geospatial/Trams Network\", layer = \"PTV_METRO_TRAM_ROUTE\")\n\nReading layer `PTV_METRO_TRAM_ROUTE' from data source \n  `C:\\Users\\Ming Rong\\Desktop\\IS415 Project\\spatial-bros\\data\\geospatial\\Trams Network' \n  using driver `ESRI Shapefile'\nSimple feature collection with 82 features and 12 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 144.878 ymin: -37.91422 xmax: 145.182 ymax: -37.67898\nGeodetic CRS:  GDA2020\n\ntram_network <- st_transform(tram_network, crs = 7855)\n\n\n\n\nLocalities file downloaded was entire Australia. Therefore, we need to filter to retrieve localities of Melbourne.\n\nlocalities = st_read(\"data/geospatial/Localities\", layer = \"vic_localities\") \n\nReading layer `vic_localities' from data source \n  `C:\\Users\\Ming Rong\\Desktop\\IS415 Project\\spatial-bros\\data\\geospatial\\Localities' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2973 features and 6 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 140.9619 ymin: -39.13657 xmax: 149.9763 ymax: -33.98127\nGeodetic CRS:  GDA2020\n\n# melbourne_localities <- localities[localities$UCL_NAME21 == \"Melbourne\", ]\n# melbourne_localities <- st_transform(melbourne_localities, crs = 7855)\n\n\n\n\nLocal Government Areas file downloaded was entire Australia. Therefore, we need to filter to retrieve Local Government Areas of Melbourne.\n\nlocal_government_areas = st_read(\"data/geospatial/Local Government Areas\", layer = \"LGA_2022_AUST_GDA2020\")\n\nReading layer `LGA_2022_AUST_GDA2020' from data source \n  `C:\\Users\\Ming Rong\\Desktop\\IS415 Project\\spatial-bros\\data\\geospatial\\Local Government Areas' \n  using driver `ESRI Shapefile'\nSimple feature collection with 566 features and 10 fields (with 19 geometries empty)\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 96.81695 ymin: -43.7405 xmax: 167.998 ymax: -9.142163\nGeodetic CRS:  GDA2020\n\nmelbourne_local_government_areas = local_government_areas[local_government_areas$LGA_NAME22 == \"Melbourne\",]\nmelbourne_local_government_areas <- st_transform(melbourne_local_government_areas, crs = 7855)\nplot(melbourne_local_government_areas)\n\nWarning: plotting the first 9 out of 10 attributes; use max.plot = 10 to plot\nall\n\n\n\n\n\n\n\n\nTo retrieve only latest as of 2021 business establishments and is not vacant.\n\nbusiness_est_sp <- st_read(\"data/geospatial/Business Establishments Spatial Point/business-establishments-with-address-and-industry-classification.geojson\") %>% filter(census_year == \"2021\") %>% filter(trading_name != \"Vacant\")\n\nReading layer `business-establishments-with-address-and-industry-classification' from data source `C:\\Users\\Ming Rong\\Desktop\\IS415 Project\\spatial-bros\\data\\geospatial\\Business Establishments Spatial Point\\business-establishments-with-address-and-industry-classification.geojson' \n  using driver `GeoJSON'\nreplacing null geometries with empty geometries\nSimple feature collection with 354556 features and 12 fields (with 4786 geometries empty)\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 144.8985 ymin: -37.85138 xmax: 144.9906 ymax: -37.77586\nGeodetic CRS:  WGS 84\n\nbusiness_est_sp <- st_transform(business_est_sp, crs = 7855) \n\n\n\n\n\ndrinking_fountain_sp <- st_read(\"data/geospatial/Drinking Fountain Spatial Point\", layer = \"drinking-fountains\")\n\nReading layer `drinking-fountains' from data source \n  `C:\\Users\\Ming Rong\\Desktop\\IS415 Project\\spatial-bros\\data\\geospatial\\Drinking Fountain Spatial Point' \n  using driver `ESRI Shapefile'\nSimple feature collection with 302 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 144.9159 ymin: -37.84521 xmax: 144.991 ymax: -37.77712\nGeodetic CRS:  WGS 84\n\ndrinking_fountain_sp <- st_transform(drinking_fountain_sp, crs = 7855)\n\n\n\n\n\nlandmarks_sp <- st_read(\"data/geospatial/Landmarks Spatial Point\", layer = \"landmarks-and-places-of-interest-including-schools-theatres-health-services-spor\")\n\nReading layer `landmarks-and-places-of-interest-including-schools-theatres-health-services-spor' from data source `C:\\Users\\Ming Rong\\Desktop\\IS415 Project\\spatial-bros\\data\\geospatial\\Landmarks Spatial Point' \n  using driver `ESRI Shapefile'\nSimple feature collection with 242 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 144.9082 ymin: -37.84852 xmax: 144.9894 ymax: -37.78127\nGeodetic CRS:  WGS 84\n\nlandmarks_sp <- st_transform(landmarks_sp, crs = 7855)\n\n\n\n\nTo only retrieve 2015 residential dwellings\n\nresidential_dwelling_sp <- st_read(\"data/geospatial/Residential Dwellings Spatial Point/residential-dwellings.geojson\") %>% filter(census_year == \"2015\")\n\nReading layer `residential-dwellings' from data source \n  `C:\\Users\\Ming Rong\\Desktop\\IS415 Project\\spatial-bros\\data\\geospatial\\Residential Dwellings Spatial Point\\residential-dwellings.geojson' \n  using driver `GeoJSON'\nreplacing null geometries with empty geometries\nSimple feature collection with 188160 features and 11 fields (with 2869 geometries empty)\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 144.905 ymin: -37.84798 xmax: 144.9908 ymax: -37.77583\nGeodetic CRS:  WGS 84\n\nresidential_dwelling_sp <- st_transform(residential_dwelling_sp, crs = 7855)\nst_crs(residential_dwelling_sp)\n\nCoordinate Reference System:\n  User input: EPSG:7855 \n  wkt:\nPROJCRS[\"GDA2020 / MGA zone 55\",\n    BASEGEOGCRS[\"GDA2020\",\n        DATUM[\"Geocentric Datum of Australia 2020\",\n            ELLIPSOID[\"GRS 1980\",6378137,298.257222101,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",7844]],\n    CONVERSION[\"Map Grid of Australia zone 55\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",147,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",10000000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Australia - onshore and offshore between 144°E and 150°E.\"],\n        BBOX[-50.89,144,-9.23,150.01]],\n    ID[\"EPSG\",7855]]\n\n\n\n\n\n\nchildcare_sp <- read_csv(\"data/geospatial/Childcare Centres Spatial Point/childcare-centres.csv\")\n\nRows: 29 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): name, contact_ph, url\ndbl (3): ref, lat, lon\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nUpon research, it was found that EPSG: 4326 is wGS84 Geographic Coordinate System, therefore we have to convert it to Melbourne’s GDA2020 / MGA zone 55 – EPSG:7855 (https://parametricmonkey.com/2020/04/08/understanding-australias-coordinate-systems/)\n\nchildcare_sp_sf <- st_as_sf(childcare_sp, \n                       coords = c(\"lon\", \"lat\"),\n                       crs=4326) %>%\n  st_transform(crs = 7855)\n\n\n\n\n\nchildcare_spdf <- as(childcare_sp_sf, \"Spatial\")\nchildcare_spdf\n\nclass       : SpatialPointsDataFrame \nfeatures    : 29 \nextent      : 316811.7, 322956.8, 5809281, 5816727  (xmin, xmax, ymin, ymax)\ncrs         : +proj=utm +zone=55 +south +ellps=GRS80 +units=m +no_defs \nvariables   : 4\nnames       :    ref,                         name,   contact_ph,                          url \nmin values  : 100083,     Alfred Child Care Centre, 03 8344 9621, http://emcc.org.au/yarra.php \nmax values  : 717144, Yarra Park Children's Centre,    9820 2758,   http://www.wimblest.com.au \n\n\n\n\n\n\n\npublic_toilets_sp <- read_csv(\"data/geospatial/Public Toilets Spatial Point/public-toilets.csv\")\n\nRows: 74 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): name, female, male, wheelchair, operator, baby_facil\ndbl (2): lat, lon\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nUpon research, it was found that EPSG: 4326 is wGS84 Geographic Coordinate System, therefore we have to convert it to Melbourne’s GDA2020 / MGA zone 55 – EPSG:7855 (https://parametricmonkey.com/2020/04/08/understanding-australias-coordinate-systems/)\n\npublic_toilets_sp_sf <- st_as_sf(public_toilets_sp, \n                       coords = c(\"lon\", \"lat\"),\n                       crs=4326) %>%\n  st_transform(crs = 7855)\n\n\n\n\n\npublic_toilets_spdf <- as(public_toilets_sp_sf, \"Spatial\")\npublic_toilets_spdf\n\nclass       : SpatialPointsDataFrame \nfeatures    : 74 \nextent      : 316969.7, 322790.1, 5809443, 5816753  (xmin, xmax, ymin, ymax)\ncrs         : +proj=utm +zone=55 +south +ellps=GRS80 +units=m +no_defs \nvariables   : 6\nnames       :                                                        name, female, male, wheelchair,          operator, baby_facil \nmin values  :      Public Toilet - Newmarket Reserve (26 Smithfield Road),     no,   no,         no, City of Melbourne,         no \nmax values  : Public Toilet - Victoria Harbour, Shed 3 (North Wharf Road),    yes,  yes,        yes, City of Melbourne,        yes \n\n\n\n\n\n\n\n\n\n\ntmap_options('view')\n\nWarning in tmap_options(\"view\"): the following options do not exist: view\n\n\nnamed list()\n\nroad_network_be <- tm_basemap(server = \"OpenStreetMap\") +\n  tm_shape(road_network_lines) +\n  tm_lines() +\n  tm_shape(business_est_sp) +\n  tm_dots(size = 0.03, col=\"green\")\n\n\n\n\n\ntmap_options('view')\n\nWarning in tmap_options(\"view\"): the following options do not exist: view\n\n\nnamed list()\n\nroad_network_cc <- tm_basemap(server = \"OpenStreetMap\") +\n  tm_shape(road_network_lines) +\n  tm_lines() +\n  tm_shape(childcare_spdf) +\n  tm_dots(size = 0.03, col=\"green\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntmap_save(road_network_cc, \"tmaphtml/road_network_cc.html\")\n\nInteractive map saved to C:\\Users\\Ming Rong\\Desktop\\IS415 Project\\spatial-bros\\tmaphtml\\tmaphtml\\road_network_cc.html\n\ntmap_save(road_network_be, \"tmaphtml/road_network_be.html\")\n\nInteractive map saved to C:\\Users\\Ming Rong\\Desktop\\IS415 Project\\spatial-bros\\tmaphtml\\tmaphtml\\road_network_be.html"
  }
]